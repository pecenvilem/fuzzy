#include <cmath>
#include "json.hpp"

#include "fuzzy.h"

using json = nlohmann::json;

double Curve::get_lower_bound(void) {return _lower_bound;}

double Curve::get_upper_bound(void) {return _upper_bound;}

void Curve::set_lower_bound(double value)
{
    if (value > _upper_bound)
    {
        _lower_bound = _upper_bound;
        _upper_bound = value;
    }
    else 
    {
        _lower_bound = value;
    }
}

void Curve::set_upper_bound(double value)
{
    if (value < _lower_bound)
    {
        _upper_bound = _lower_bound;
        _lower_bound = value;
    }
    else 
    {
        _upper_bound = value;
    }
}

LinearCurve::LinearCurve(void) {_slope = 1; _intercept = 0;}

LinearCurve::LinearCurve(double lower_bound, double upper_bound, double slope, double intercept)
: Curve(lower_bound, upper_bound)
{
    _slope = slope; _intercept = intercept;
}

double LinearCurve::membership(double input)
{
    return _slope * input + _intercept;
}

// QuadraticCurve::QuadraticCurve(void)
// {
//     _a = 1; _b = _c = 0;
// }

// QuadraticCurve::QuadraticCurve(double a, double b, double c)
// {
//     _a = a; _b = b; _c = c;
// }

// double QuadraticCurve::membership(double input)
// {
//     return _a * input*input + _b * input + _c;
// }

// LogarithmicCurve::LogarithmicCurve(void)
// {
//     _base = M_E; _x_offset = _y_offset = 0;
// }

// LogarithmicCurve::LogarithmicCurve(double base, double x_offset, double y_offset)
// {
//     _base = base; _x_offset = x_offset; _y_offset = y_offset;
// }

// double LogarithmicCurve::membership(double input)
// {
//     return log(input + _x_offset) / log(_base) + _y_offset;
// }
