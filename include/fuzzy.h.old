#ifndef __FUZZY__H__
#define __FUZZY__H__

#include <vector>
#include "json.hpp"

using json = nlohmann::json;

class Curve
{
    /* Abstract base class representing one individual segment of
    membership funcion of Fuzzy Set */
    private:
        double _lower_bound, _upper_bound;
    public:
        Curve(void);
        Curve(double lower_bound, double upper_bound);
        double get_lower_bound(void);
        double get_upper_bound(void);
        void set_lower_bound(double value);
        void set_upper_bound(double value);
        
        virtual double membership(double input) = 0;
};

class LinearCurve: public Curve
{
    // y = slope*x + intercept
    private:
        double _slope, _intercept;
    public:
        LinearCurve(void);
        LinearCurve(double lower_bound, double upper_bound, double slope, double intercept);
        LinearCurve(json& j);
        double membership(double input) override;

};

// class QuadraticCurve: public Curve
// {
//     // y = a*x^2 + b*x + c
//     private:
//         double _a;      // quadratic coefficient
//         double _b;      // linear coefficient
//         double _c;      // absolute coefficient
//     public:
//         QuadraticCurve(void);
//         QuadraticCurve(double a, double b, double c);
//         double membership(double input) override;
// };


// class LogarithmicCurve: public Curve
// {
//     // y = log_'base'(x + 'x_offset') + 'y_offset'
//     private:
//         double _base;
//         double _x_offset, _y_offset;
//     public:
//         LogarithmicCurve(void);
//         LogarithmicCurve(double base, double x_offset, double y_offset);
//         double membership(double input) override;
// };

// class ExponentialCurve: public Curve
// {
//     // y = 'base'^(x + 'x_offset') + 'y_offset'
//     private:
//         double _base;
//         double _x_offset, _y_offset;
//     public:
//         ExponentialCurve(void);
//         ExponentialCurve(double base, double x_offset, double y_offset);
//         double membership(double input) override;
// };


// class FuzzySet
// {
//     private:
//         std::vector<Curve> _curves;
//     public:
//         FuzzySet(/* args */);
//         ~FuzzySet();
// };


#endif  //!__FUZZY__H__